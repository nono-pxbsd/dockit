#!/bin/bash

# Chargement des modules
SCRIPT_DIR="$( cd "$( dirname "$(readlink -f "${BASH_SOURCE[0]}" )" )" && pwd )"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"
source "$ROOT_DIR/lib/project.sh"
source "$ROOT_DIR/lib/ports.sh"
source "$ROOT_DIR/lib/docker.sh"
source "$ROOT_DIR/lib/prompt.sh"
source "$ROOT_DIR/lib/env.sh"
source "$ROOT_DIR/lib/versions.sh"
source "$ROOT_DIR/lib/prestashop.sh"
source "$ROOT_DIR/lib/utils.sh"

# Couleurs
GREEN="\e[32m"
CYAN="\e[36m"
BOLD="\e[1m"
RESET="\e[0m"

echo -e "${BOLD}${CYAN}üöÄ Welcome to the PrestaShop environment setup!${RESET}"

######################################
# √âtape 1 : Nom du projet
######################################
read -p "üìù Enter project name (letters, dashes, underscores, dots): " raw_project_name
PROJECT_NAME=$(sanitize_project_name "$raw_project_name") || exit 1
echo -e "‚úÖ Project name: ${GREEN}${PROJECT_NAME}${RESET}"

######################################
# √âtape 1.5 : Choix du dossier racine
######################################
read -p "üìÅ O√π souhaitez-vous cr√©er le projet ? [/var/www] : " BASE_DIR_INPUT
BASE_DIR=$(normalize_path "${BASE_DIR_INPUT:-/var/www}")
PROJECT_DIR=$(normalize_path "$BASE_DIR/$PROJECT_NAME")
echo -e "üìÇ R√©pertoire du projet : ${GREEN}$PROJECT_DIR${RESET}"

if [ ! -d "$PROJECT_DIR" ]; then
  echo "üìÇ Cr√©ation du r√©pertoire du projet : $PROJECT_DIR"
  mkdir -p "$PROJECT_DIR" || { echo "‚ùå Impossible de cr√©er le r√©pertoire $PROJECT_DIR"; exit 1; }
fi

######################################
# √âtape 2 : Choix de la version PS
######################################
PS_VERSION=$(select_prestashop_version)
echo -e "‚úÖ Selected PrestaShop version: ${GREEN}${PS_VERSION}${RESET}"

######################################
# √âtape 3 : Stack recommand√©e
######################################
read -r PHP_VERSION MARIADB_VERSION NODE_VERSION <<< "$(get_stack_for_ps_version "$PS_VERSION")"
echo -e "üß© Stack recommand√©e ‚Üí PHP: ${GREEN}${PHP_VERSION}${RESET}, MariaDB: ${GREEN}${MARIADB_VERSION}${RESET}, Node: ${GREEN}${NODE_VERSION}${RESET}"

######################################
# √âtape 4 : S√©lection des extensions PHP
######################################
source "$ROOT_DIR/lib/select-php-extensions.sh"
PHP_EXTENSIONS=$(select_php_extensions)
echo -e "‚úÖ Extensions PHP s√©lectionn√©es : ${GREEN}${PHP_EXTENSIONS}${RESET}"

######################################
# √âtape 5 : D√©tection automatique des ports
######################################
read -p "üìç Port de base (ex: 10000) [10000] : " BASE_PORT_INPUT
BASE_PORT=${BASE_PORT_INPUT:-10000}

WEB_HTTP_PORT=$(find_free_port "$BASE_PORT")
WEB_HTTPS_PORT=$(find_free_port $((WEB_HTTP_PORT + 1)))
PHPMYADMIN_PORT=$(find_free_port $((WEB_HTTPS_PORT + 1)))
MAILPIT_PORT=$(find_free_port $((PHPMYADMIN_PORT + 1)))
DB_PORT=$(find_free_port $((MAILPIT_PORT + 1)))

echo -e "üß† Ports assign√©s :"
echo "   üåê HTTP         : $WEB_HTTP_PORT"
echo "   üîê HTTPS        : $WEB_HTTPS_PORT"
echo "   üõ¢Ô∏è PhpMyAdmin   : $PHPMYADMIN_PORT"
echo "   üì¨ Mailpit      : $MAILPIT_PORT"
echo "   üê¨ MySQL        : $DB_PORT"

######################################
# √âtape 6 : D√©tection de la plateforme Docker
######################################
DOCKER_PLATFORM=$(detect_docker_platform)
echo -e "üì¶ Docker Platform : ${GREEN}${DOCKER_PLATFORM}${RESET}"

######################################
# √âtape 7 : Nom des r√©pertoires dynamiques
######################################
read -p "üìÇ Nom du r√©pertoire pour les sources (par d√©faut : ps_sources) : " PS_SOURCES_DIR
PS_SOURCES_DIR=$(normalize_path "$PROJECT_DIR/${PS_SOURCES_DIR:-ps_sources}")

read -p "üìÇ Nom du r√©pertoire pour les logs (par d√©faut : ps_logs) : " PS_LOGS_DIR
PS_LOGS_DIR=$(normalize_path "$PROJECT_DIR/${PS_LOGS_DIR:-ps_logs}")

read -p "üìÇ Nom du r√©pertoire pour la base de donn√©es (par d√©faut : ps_db) : " PS_DB_DIR
PS_DB_DIR=$(normalize_path "$PROJECT_DIR/${PS_DB_DIR:-ps_db}")

echo -e "‚úÖ R√©pertoires d√©finis :"
echo "   Sources : ${GREEN}${PS_SOURCES_DIR} ${RESET}"
echo "   Logs    : ${GREEN}${PS_LOGS_DIR} ${RESET}"
echo "   DB      : ${GREEN}${PS_DB_DIR} ${RESET}"

######################################
# √âtape 7 : G√©n√©ration du fichier .env
######################################
ENV_TEMPLATE="$ROOT_DIR/.env.default"
ENV_TARGET="$PROJECT_DIR/.env"
generate_env_file "$ENV_TEMPLATE" "$ENV_TARGET" \
  "PROJECT_NAME=$PROJECT_NAME" \
  "PROJECT_DIR=$PROJECT_DIR" \
  "PS_VERSION=$PS_VERSION" \
  "PHP_VERSION=$PHP_VERSION" \
  "NODE_VERSION=$NODE_VERSION" \
  "MARIADB_VERSION=$MARIADB_VERSION" \
  "WEB_HTTP_PORT=$WEB_HTTP_PORT" \
  "WEB_HTTPS_PORT=$WEB_HTTPS_PORT" \
  "PHPMYADMIN_PORT=$PHPMYADMIN_PORT" \
  "MAILPIT_PORT=$MAILPIT_PORT" \
  "DB_PORT=$DB_PORT" \
  "DOCKER_PLATFORM=$DOCKER_PLATFORM" \
  "PHP_EXTENSIONS=$PHP_EXTENSIONS" \
  "PS_SOURCES_DIR=$PS_SOURCES_DIR" \
  "PS_LOGS_DIR=$PS_LOGS_DIR" \
  "PS_DB_DIR=$PS_DB_DIR"

if [ ! -f "$ENV_TARGET" ]; then
  echo "‚ùå Le fichier .env n'a pas √©t√© g√©n√©r√©."
  exit 1
fi

echo -e "‚úÖ ${GREEN}Fichier .env g√©n√©r√© avec succ√®s :${RESET} $ENV_TARGET"

######################################
# √âtape 8 : G√©n√©ration du fichier docker-compose.yml
######################################
DOCKER_COMPOSE_TEMPLATE="$ROOT_DIR/templates/prestashop/docker-compose.tpl.yml"
DOCKER_COMPOSE_TARGET="$PROJECT_DIR/docker-compose.yml"

echo -e "üìÑ G√©n√©ration du fichier docker-compose.yml..."
envsubst < "$DOCKER_COMPOSE_TEMPLATE" > "$DOCKER_COMPOSE_TARGET"

if [ -f "$DOCKER_COMPOSE_TARGET" ]; then
  echo -e "‚úÖ ${GREEN}Fichier docker-compose.yml g√©n√©r√© avec succ√®s :${RESET} $DOCKER_COMPOSE_TARGET"
else
  echo -e "‚ùå ${RED}Erreur lors de la g√©n√©ration du fichier docker-compose.yml.${RESET}"
  exit 1
fi

######################################
# √âtape 9 : T√©l√©chargement de PrestaShop
######################################
read -p "üì• Souhaitez-vous t√©l√©charger PrestaShop ${PS_VERSION} dans le projet ? (y/N) " DOWNLOAD_PS
if [[ "$DOWNLOAD_PS" =~ ^[Yy]$ ]]; then
  download_and_extract_prestashop "$PS_VERSION" "$PROJECT_DIR/prestashop"
else
  echo "‚è≠Ô∏è  √âtape ignor√©e."
fi

######################################
# √âtape 10 : Lancement
######################################
echo -e "üöÄ Lancez maintenant : ${BOLD}cd $PROJECT_DIR && docker compose up -d${RESET}"